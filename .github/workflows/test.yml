name: SEO Bot Test Suite

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  schedule:
    # Run tests daily at 2 AM UTC
    - cron: '0 2 * * *'

env:
  PYTHON_VERSION: '3.9'
  NODE_VERSION: '18'

jobs:
  test-python:
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:13
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: seo_bot_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:6
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'
    
    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y postgresql-client
    
    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install poetry
        poetry config virtualenvs.create false
        poetry install --no-interaction --no-ansi
        pip install pytest pytest-cov pytest-asyncio pytest-xdist coverage
    
    - name: Set up test database
      run: |
        PGPASSWORD=postgres createdb -h localhost -U postgres seo_bot_test
      env:
        PGPASSWORD: postgres
    
    - name: Run linting
      run: |
        poetry run flake8 src/ tests/ --max-line-length=100 --ignore=E203,W503
        poetry run black --check src/ tests/
        poetry run isort --check-only src/ tests/
    
    - name: Run type checking
      run: |
        poetry run mypy src/ --ignore-missing-imports
    
    - name: Run unit tests
      run: |
        poetry run pytest tests/ \
          --cov=src/ \
          --cov-report=xml \
          --cov-report=html \
          --cov-report=term-missing \
          --cov-fail-under=80 \
          -v \
          --maxfail=5 \
          -n auto
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/seo_bot_test
        REDIS_URL: redis://localhost:6379
        TESTING: true
    
    - name: Run integration tests
      run: |
        poetry run pytest tests/test_*_integration.py -v
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/seo_bot_test
        REDIS_URL: redis://localhost:6379
        TESTING: true
    
    - name: Run performance tests
      run: |
        poetry run python tests/test_framework.py
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        fail_ci_if_error: true
    
    - name: Generate test report
      if: always()
      run: |
        poetry run python tests/test_framework.py generate-report
    
    - name: Upload test reports
      if: always()
      uses: actions/upload-artifact@v3
      with:
        name: python-test-reports
        path: test_reports/

  test-frontend:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Node.js
      uses: actions/setup-node@v3
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Run linting
      run: |
        npm run lint
        npm run type-check
    
    - name: Run tests
      run: npm run test:coverage
    
    - name: Build application
      run: npm run build
    
    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: build-files
        path: dist/

  security-scan:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install safety bandit semgrep
    
    - name: Run safety check
      run: safety check --json --output safety-report.json || true
    
    - name: Run bandit security scan
      run: |
        bandit -r src/ -f json -o bandit-report.json || true
    
    - name: Run Semgrep
      run: |
        semgrep --config=auto src/ --json --output semgrep-report.json || true
    
    - name: Upload security reports
      uses: actions/upload-artifact@v3
      with:
        name: security-reports
        path: |
          safety-report.json
          bandit-report.json
          semgrep-report.json

  docker-build:
    runs-on: ubuntu-latest
    needs: [test-python, test-frontend]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2
    
    - name: Log in to Docker Hub
      if: github.event_name != 'pull_request'
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
    
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v4
      with:
        images: seobot/seo-bot-standalone
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}
    
    - name: Build and push Docker image
      uses: docker/build-push-action@v4
      with:
        context: .
        platforms: linux/amd64,linux/arm64
        push: ${{ github.event_name != 'pull_request' }}
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  deploy-staging:
    runs-on: ubuntu-latest
    needs: [docker-build, security-scan]
    if: github.ref == 'refs/heads/develop'
    environment: staging
    
    steps:
    - name: Deploy to staging
      run: |
        echo "Deploying to staging environment"
        # Add your deployment commands here

  deploy-production:
    runs-on: ubuntu-latest
    needs: [docker-build, security-scan]
    if: github.ref == 'refs/heads/main'
    environment: production
    
    steps:
    - name: Deploy to production
      run: |
        echo "Deploying to production environment"
        # Add your deployment commands here

  notify:
    runs-on: ubuntu-latest
    needs: [test-python, test-frontend, security-scan]
    if: always()
    
    steps:
    - name: Notify on success
      if: needs.test-python.result == 'success' && needs.test-frontend.result == 'success'
      run: |
        echo "✅ All tests passed successfully!"
        # Add Slack/Discord notification here
    
    - name: Notify on failure
      if: needs.test-python.result == 'failure' || needs.test-frontend.result == 'failure'
      run: |
        echo "❌ Tests failed!"
        # Add failure notification here